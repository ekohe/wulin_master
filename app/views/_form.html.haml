:ruby
  model_name = grid.model.model_name.singular
  columns = grid.columns.dup.delete_if {|x| x.name.to_s == 'id' }
  if params[:update_version].present? and (version_columns = grid.find_columns_by_version(params[:update_version])).present?
    columns.select!{|x| version_columns.include?(x.name)}
  end
  object = grid.model.new
  is_new = params["action"] === 'wulin_master_new_form'
  title = "#{title_prefix} #{model_name.titleize}"

  modal_title_action = grid.actions.find{ |a| a[:name].to_s == action.to_s }
  if modal_title_action && modal_title_action[:modal_title]
    title = modal_title_action[:modal_title]
  end

.create_form{:id => "#{grid.name}_form", data: {action: action}}
  %h5.title= title
  = form_for object, :url => grid.path do |form|
    = hidden_field_tag :grid, grid.class.to_s
    = hidden_field_tag :screen, screen.class.to_s
    .base_error
    - columns.each do |column|
      - if send("#{type}_form_able?", column)
        :ruby
          column_name = get_column_name(column)
          hide_autocomplete = column.options[:hide_autocomplete]
          autocomplete_minlength = column.options[:autocomplete_minlength]
          label = column.options[:form_label] || column.label
          _klass = model_name.classify
          field = column.options[:through] || column.name
          source = column.editor_source || column.source
        .field-line
          - unless is_new
            .switch.target_flag_container
              %label
                %input.target_flag{type: 'checkbox', "data-target" => "#{column_name}_target_flag", "data-target-id" => "#{column_name}_target_flag"}
                %span.lever
          .field{:name => column_name}
            - if (column.sql_type.to_s == 'belongs_to' || column.sql_type.to_s == 'enum')
              .input-field.input-outlined
                %label{:for => "#{model_name}_#{column_name}"}= label
                = form.select column_name,                                      |
                  select_options(column),                                       |
                  { include_blank: !column.presence_required? },                |
                  :class             => 'chzn-select select2',                  |
                  :disabled          => column.options[:auto_fill],             |
                  "data-required"    => column.presence_required?,              |
                  "data-source"      => source,                                 |
                  "data-target"      => "#{column_name}_target_flag",           |
                  "data-target-id"   => "#{column_name}_target_flag",           |
                  "data-field"       => field                                    |
                - if column.options[:depend_column].present? && column.options[:choices].present? && column.options[:choices].is_a?(String)
                  :javascript
                    $(function(){
                      const depend_select_id = "#{model_name}_#{column.options[:depend_column]}_id", depend_select = "select#"+depend_select_id;
                      const target_select_id = "#{model_name}_#{column_name}", target_select = "select#"+target_select_id;

                      $(depend_select).on("select2:select select2:clear", function(){
                        const master_id = $(depend_select).select2('data')[0].id, master_model = "#{column.options[:depend_column]}";
                        const fetch_option_url = "#{column.options[:choices]}";

                        $.getJSON(`${fetch_option_url}&master_model=${master_model}&master_id=${master_id}`, function(items) {
                          const previous_selection = $(target_select).val();
                          $(target_select).empty();
                          items.forEach(function({id, name}) {
                            $(target_select).append(new Option(name, id, false, false));
                          })

                          if (items.find(item => item.id === previous_selection)) {
                            $(target_select).val(previous_selection).change();
                          } else {
                            $(target_select).val(null).change();
                          }
                        })
                      });
                    });

            - elsif (column.sql_type.to_s == 'has_and_belongs_to_many' or column.sql_type.to_s == 'has_many')
              .input-field.input-outlined
                %label{:for => "#{model_name}_#{column_name}"}= label
                = form.select column.reflection.name.to_s,                       |
                  select_options(column),                                        |
                  { include_blank: !column.presence_required? },                 |
                  :multiple          => true,                                    |
                  :class             => 'chzn-select select2',                  |
                  "data-required"    => column.presence_required?,               |
                  "data-source"      => source,                                  |
                  "data-target"      => "#{column_name}_target_flag",            |
                  "data-target-id"   => "#{column_name}_target_flag",            |
                  "data-field"       => field,                                   |
                  :disabled          => column.options[:auto_fill]               |

            - elsif (select_tag_field?(column) || column.sql_type.to_s == 'has_one')
              .input-field.input-outlined
                %label{:for => "#{model_name}_#{column_name}"}= label
                = select_tag "#{model_name}[#{column_name}]",                   |
                  select_tag_options(column),                                   |
                  :class             => 'chzn-select select2',                  |
                  :disabled          => column.options[:auto_fill],             |
                  :include_blank     => !column.presence_required?,             |
                  "data-required"    => column.presence_required?,              |
                  "data-target"      => "#{column_name}_target_flag",           |
                  "data-target-id"   => "#{column_name}_target_flag",           |
                  "data-source"      => source,                                 |
                  "data-field"       => field                                   |
                - if (column.options[:depend_column].present?)
                  :javascript
                    $(function(){
                      var depend_select_id = "#{model_name}_#{column.options[:depend_column]}";
                      var depend_select = $("select#" + depend_select_id);
                      var current_select_id = "#{model_name}_#{column_name}";
                      var current_select = $("select#" + current_select_id);
                      $(document).on("change", "select#"+depend_select_id, function(){
                        var key = $(this).val();
                        $(current_select).select2({
                            templateResult: resultState
                        });
                        //select2 display need to be added on the container
                        function resultState(data, container) {
                          if($(data.element).data("key") !== key ) {
                              $(container).addClass("optInvisible");
                          }
                          return data.text;
                         }
                      });
                    });

            - elsif column.options[:file]
              %label{:for => "#{model_name}_#{column_name}"}= label
              = form.file_field column_name, "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 250px', "data-target-id" => "#{column_name}_target_flag"
            - elsif column.options[:password]
              %label{:for => "#{model_name}_#{column_name}"}= label
              = form.password_field column_name, "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 250px', "data-target-id" => "#{column_name}_target_flag"
            - elsif (column.sql_type.to_s == 'string')
              .input-field.input-outlined
                %label{:for => "#{model_name}_#{column_name}"}= label
                = form.text_field column_name, :class => "auto-complete-text-field-#{column_name}", :value => column.value(object), "data-target" => "#{column_name}_target_flag", "data-field" => field, "data-target-id" => "#{column_name}_target_flag"

              :javascript
                if(__globalWillAppend) {
                  var choices = "/wulin_master/fetch_distinct_options?"
                                      + "column=#{column_name}"
                                      + "&grid=#{grid.class}"
                                      + "&klass=#{grid.model.name}"
                                      + "&screen=#{screen.class}"
                                      + "&source=#{column_name}";
                  var container = $(".auto-complete-text-field-#{column_name}");
                  //check if column has autocomplete options
                  let hide_autocomplete = "#{hide_autocomplete}"
                  let autocomplete_minlength = "#{autocomplete_minlength}"
                  var column = {
                    auto_complete: true,
                    width: container.width(),
                    choices: choices,
                    hide_autocomplete: hide_autocomplete,
                    autocomplete_minlength: autocomplete_minlength
                  };
                  var args = {
                    column: column,
                    container: container
                  };

                  carbonCopyNewEditor = TextEditorForForm.bind({})
                  carbonCopyNewEditor(args);
                }

            - else
              - if column.sql_type.to_s.downcase == 'boolean'
                .checkboxMargin
                  %label
                    = form.check_box column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-field" => field, class: 'filled-in', "data-target-id" => "#{column_name}_target_flag"
                    %span= label
              - elsif column.options[:editor]=='RichTextEditor'
                .input-field.input-outlined
                  %label{:for => "#{model_name}_#{column_name}"}= label
                  %textarea{name: "#{model_name}[#{column_name}]", id: "#{model_name}_#{column_name}_rich_text_editor", "data-field" => field, "data-target-id" => "#{column_name}_target_flag", class: 'materialnote'}= column.value(object)
                  :javascript
                    window.materialNoteIndex = (window.materialNoteIndex ? window.materialNoteIndex + 1 : 1);
                    $('##{model_name}_#{column_name}_rich_text_editor').materialnote({
                      height: 300,
                      toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['strikethrough']],
                        ['fontsize', ['fontsize']],
                        ['color', ['color']],
                        ['table', ['table']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['insert', ['link', 'picture', 'video']],
                        ['view', ['fullscreen', 'codeview']]
                      ],
                      callbacks: {
                        onFocus: function() {
                          $('##{model_name}_#{column_name}_rich_text_editor').parent().addClass('focused');
                        },
                        onBlur: function() {
                          $('##{model_name}_#{column_name}_rich_text_editor').parent().removeClass('focused');
                        }
                      },
                      defaultColors: {
                        text: 'red',
                        background: 'transparent'
                      },
                      posIndex: window.materialNoteIndex
                    });
              - elsif column.sql_type.to_s.downcase == 'text'
                .input-field.input-outlined
                  %label.textarea-label{:for => "#{model_name}_#{column_name}"}= label
                  = form.text_area column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-field" => field, "rows" => "6", class: "materialize-textarea", "data-target-id" => "#{column_name}_target_flag"
              - elsif column.sql_type.to_s.downcase == 'integer'
                .input-field.input-outlined
                  %label{:for => "#{model_name}_#{column_name}"}= label
                  = form.text_field column_name, :style => 'width: 250px', :value => column.value(object), :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", 'data-date' => date_column?(column), 'data-datetime' => datetime_column?(column), 'data-time' => time_column?(column), "data-field" => field, "data-target-id" => "#{column_name}_target_flag"
              - else
                .input-field.input-outlined
                  %label{:for => "#{model_name}_#{column_name}"}= label
                  = form.text_field column_name, :style => 'width: 250px', :value => column.value(object), :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", 'data-date' => date_column?(column), 'data-datetime' => datetime_column?(column), 'data-time' => time_column?(column), "data-field" => field, "data-target-id" => "#{column_name}_target_flag"

            .field_error
    .submit
      %a.btn-flat.waves-effect.modal-close CANCEL
      - if is_new
        %input.btn-flat.waves-effect.color-blue{id: "#{grid.name}_submit_continue", name: "commit", type: "submit", value: " Create and Continue "}
        %input.btn.waves-effect{id: "#{grid.name}_submit", name: "commit", type: "submit", value: " Create "}
      - else
        %input.btn.waves-effect{id: "#{grid.name}_batch_#{name}", class: "#{name}_btn", name: "commit", type: "submit", value: " #{button_name} "}

:javascript
  $('.input-outlined').first().children("input").focus()
