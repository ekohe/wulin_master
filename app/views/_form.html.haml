:ruby
  model_name = grid.model.model_name.singular
  columns = grid.columns.dup.delete_if {|x| x.name.to_s == 'id' }
  if params[:update_version].present? and (version_columns = grid.find_columns_by_version(params[:update_version])).present?
    columns.select!{|x| version_columns.include?(x.name)}
  end
  if params[:ids].present?
    object = grid.model.find(params[:ids].split(',')[0])
  else
    object = grid.model.new
  end
  is_new = params["action"] === 'wulin_master_new_form'
  type = is_new ? 'new' : 'edit'
  title = (is_new ? '创建新的' : '编辑') + grid.title
  action = is_new ? 'create' : 'update'
.create_form{:id => "#{grid.name}_form", :title => title, data: {action: action}}
  %h5.title= title
  = form_for object, :url => grid.path do |form|
    = hidden_field_tag :grid, grid.class.to_s
    = hidden_field_tag :screen, screen.class.to_s
    .base_error
    - columns.each do |column|
      - if send("#{type}_form_able?", column)
        :ruby
          column_name = get_column_name(column)
          label = column.options[:form_label] || column.label
          _klass = model_name.classify
          field = column.options[:through] || column.name
          source = column.editor_source || column.source
        .field-line
          - unless is_new
            .switch.target_flag_container
              %label
                %input.target_flag{type: 'checkbox', "data-target" => "#{column_name}_target_flag"}
                %span.lever
          .field{:name => column_name}
            - unless column.sql_type.to_s.downcase == 'boolean'
              %label{:for => "#{model_name}_#{column_name}"}= label
            - if (column.sql_type.to_s == 'belongs_to' || column.sql_type.to_s == 'enum')
              = form.select column_name,                                      |
                select_options(column),                                       |
                { include_blank: !column.presence_required? },                |
                :class             => 'chzn-select',                          |
                :disabled          => column.options[:auto_fill],             |
                "data-required"    => column.presence_required?,              |
                "data-source"      => source,                                 |
                "data-target"      => "#{column_name}_target_flag",           |
                "data-field"       => field                                   |

            - elsif (column.sql_type.to_s == 'has_and_belongs_to_many' or column.sql_type.to_s == 'has_many')
              - if column.options['multi_inputs'] == true
                .flex-fields{style: 'display: flex;flex-wrap: wrap;'}
                  - if column.name == :interiors
                    - interiors_json = object.interiors_json
                    - column.options['choices'].each do |arr|
                      - interior = interiors_json.detect { |x| x['layout_id'] == arr[1] }
                      - field_name = arr[0].gsub(' ', '_').downcase
                      .field{style: 'flex: 0 0 180px;'}
                        = form.check_box column_name,                    |
                          name: "room[interiors_attributes][][checked]", |
                          id: "room_interiors_#{field_name}",            |
                          "data-target" => "#{field_name}_target_flag",  |
                          "data-field" => field_name,                    |
                          checked: !!interior,                           |
                          class: 'filled-in'
                        = form.label "interiors_#{field_name}", arr[0]
                        %div
                          %input{ type: 'hidden', name: "room[interiors_attributes][][id]", value: interior&.dig('id') }
                          %input{ type: 'hidden', name: "room[interiors_attributes][][layout_id]", value: arr[1] }
                          %input{ type: 'text', name: "room[interiors_attributes][][capacity]", style: 'width: 80px; min-height: 20px', value: interior&.dig('capacity') }
                  - elsif column.name == :rentings
                    - rentings_json = object.rentings_json
                    - column.options['choices'].each do |arr|
                      - renting = rentings_json.detect { |x| x['service_id'] == arr[1] }
                      - field_name = arr[0].gsub(' ', '_').downcase
                      .field{style: 'flex: 0 0 180px;'}
                        = form.check_box column_name,                      |
                          name: "booking[rentings_attributes][][checked]", |
                          id: "booking_rentings_#{field_name}",            |
                          "data-target" => "#{field_name}_target_flag",    |
                          "data-field" => field_name,                      |
                          checked: !!renting,                              |
                          class: 'filled-in'
                        = form.label "rentings_#{field_name}", arr[0]
                        %div
                          %input{ type: 'hidden', name: "booking[rentings_attributes][][id]", value: renting&.dig('id') }
                          %input{ type: 'hidden', name: "booking[rentings_attributes][][service_id]", value: arr[1] }
                          %input{ type: 'text', name: "booking[rentings_attributes][][quantity]", style: 'width: 80px; min-height: 20px', value: renting&.dig('quantity') }
                  - elsif column.name == :prices
                    - prices_json = object.prices_json
                    - column.options['choices'].each do |arr|
                      - price = prices_json.detect { |x| x['condition'] == arr[0] }
                      - field_name = arr[0].gsub(' ', '_').downcase
                      .field{style: 'flex: 0 0 180px;'}
                        = form.label "prices_#{field_name}", arr[0]
                        %div
                          %input{ type: 'hidden', name: "room[prices_attributes][][id]", value: price&.dig('id') }
                          %input{ type: 'hidden', name: "room[prices_attributes][][condition]", value: arr[0] }
                          %input{ type: 'hidden', name: "room[prices_attributes][][category]", value: 'Price' }
                          %input{ type: 'text', name: "room[prices_attributes][][value]", style: 'width: 80px; min-height: 20px', value: price&.dig('value') }
                  - elsif column.name == :costs
                    - costs_json = object.costs_json
                    - column.options['choices'].each do |arr|
                      - cost = costs_json.detect { |x| x['condition'] == arr[0] }
                      - field_name = arr[0].gsub(' ', '_').downcase
                      .field{style: 'flex: 0 0 180px;'}
                        = form.label "costs_#{field_name}", arr[0]
                        %div
                          %input{ type: 'hidden', name: "room[costs_attributes][][id]", value: cost&.dig('id') }
                          %input{ type: 'hidden', name: "room[costs_attributes][][condition]", value: arr[0] }
                          %input{ type: 'hidden', name: "room[costs_attributes][][category]", value: 'Cost' }
                          %input{ type: 'text', name: "room[costs_attributes][][value]", style: 'width: 80px; min-height: 20px', value: cost&.dig('value') }

              - else
                = form.select column.reflection.name.to_s,                       |
                  select_options(column),                                        |
                  { include_blank: !column.presence_required? },                 |
                  :multiple          => true,                                    |
                  :class             => 'chzn-select',                           |
                  "data-required"    => column.presence_required?,               |
                  "data-source"      => source,                                  |
                  "data-target"      => "#{column_name}_target_flag",            |
                  "data-field"       => field,                                   |
                  :disabled          => column.options[:auto_fill]               |

            - elsif (select_tag_field?(column) || column.sql_type.to_s == 'has_one')
              = select_tag "#{model_name}[#{column_name}]",                   |
                select_tag_options(column),                                   |
                :class             => 'chzn-select',                          |
                :disabled          => column.options[:auto_fill],             |
                :include_blank     => !column.presence_required?,             |
                "data-required"    => column.presence_required?,              |
                "data-target"      => "#{column_name}_target_flag",           |
                "data-source"      => source,                                 |
                "data-field"       => field                                   |
              - if (column.options[:depend_column].present?)
                :javascript
                  $(function(){
                    var depend_select_id = "#{model_name}_#{column.options[:depend_column]}";
                    var depend_select = $("select#" + depend_select_id);

                    $(document).on("change", "select#"+depend_select_id, function(){
                      var current_select_id = "#{model_name}_#{column_name}";
                      var current_select = $("select#" + current_select_id);
                      var key = $(this).val();
                      current_select.find("option").hide().trigger("chosen:updated");
                      current_select.val("").trigger("chosen:updated");
                      current_select.find("option[data-key='" + key + "']").show().css("display", "").trigger("chosen:updated");
                    });
                  });

            - elsif column.options[:file]
              = form.file_field column_name, "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 250px'
            - elsif column.options[:password]
              = form.password_field column_name, "data-target" => "#{column_name}_target_flag", "data-field" => field, :style => 'width: 250px'
            - elsif (column.sql_type.to_s == 'string')
              = form.text_field column_name, :class => "auto-complete-text-field-#{column_name}", :value => column.value(object), "data-target" => "#{column_name}_target_flag", "data-field" => field

              :javascript
                var choices = "/wulin_master/fetch_distinct_options?"
                                     + "column=#{column_name}"
                                     + "&grid=#{grid.class}"
                                     + "&klass=#{grid.model.name}"
                                     + "&screen=#{screen.class}"
                                     + "&source=#{column_name}";
                var container = $(".auto-complete-text-field-#{column_name}");
                var column = {
                  auto_complete: true,
                  width: container.width(),
                  choices: choices
                };
                var args = {
                  column: column,
                  container: container
                };
                carbonCopyNewEditor = TextEditorForForm.bind({})
                carbonCopyNewEditor(args);

            - else
              - if column.sql_type.to_s.downcase == 'boolean'
                = form.check_box column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-field" => field, class: 'filled-in'
                = form.label column_name, label
              - elsif column.sql_type.to_s.downcase == 'text'
                = form.text_area column_name, :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-field" => field, class: "materialize-textarea"
              - else
                = form.text_field column_name, :style => 'width: 250px', :value => column.value(object), :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", 'data-date' => date_column?(column), 'data-datetime' => datetime_column?(column), 'data-time' => time_column?(column), "data-field" => field

            .field_error
    .submit
      .btn-flat.modal-close 取消
      - if is_new
        %input.btn{:id => "#{grid.name}_submit", :name => "commit", :type => "submit", :value => " 创建 "}/
        %input.btn{:id => "#{grid.name}_submit_continue", :name => "commit", :type => "submit", :value => " 创建并继续 "}/
      - else
        %input.btn.update_btn{:id => "#{grid.name}_batch_update", :name => "commit", :type => "submit", :value => "  更新  "}/
