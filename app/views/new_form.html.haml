- if grid.action_names.include?('add') || grid.action_names.include?('hotkey_add') || grid.action_names.include?('detail_add')
  :ruby
    model_name = grid.model.model_name.singular
    columns = grid.columns.dup.delete_if {|x| x.name.to_s == 'id' }
    datepicker_str = ''
    object = grid.model.new
    title = t('wulin_master.title.new_form', stuff: grid.model.model_name.human, default: "Create new #{grid.model.model_name.human}")
  .create_form.modal.fade{role: 'dialog', tabindex: '-1', id: "#{grid.name}_form", title: "#{title}", data: {action: 'create'}}
    .modal-dialog{role: 'document'}
      .modal-content
        .modal-header
          %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
            %span{"aria-hidden" => "true"} &times;
          %h4#myModalLabel.modal-title= title
        .modal-body
          = form_for object, :url => grid.path, html: {class: 'form-horizontal'} do |form|
            = hidden_field_tag :grid, grid.class.to_s
            = hidden_field_tag :screen, screen.class.to_s
            .base_error
            .form-group
              - columns.each do |column|
                - if new_form_able?(column)
                  :ruby
                    column_name = get_column_name(column)
                    label = column.options[:form_label] || column.label
                    _klass = model_name.classify
                    input_html = column.options[:input_html].presence || {}
                  .field{:name => column_name}
                    %label.control-label.col-sm-3{:for => "#{model_name}_#{column_name}"}= label
                    .col-sm-9
                      - if column.sql_type.to_s == 'belongs_to'
                        = form.select column_name,                            |
                          select_options(column),                             |
                          { include_blank: !column.presence_required? },      |
                          {:class             => 'chzn-select form-control',  |
                          :style             => "width:243px",                |
                          :disabled          => column.options[:auto_fill],   |
                          "data-required"    => column.presence_required?,    |
                          "data-text-attr"   => column.option_text_attribute, |
                          "data-target"      => "#{column_name}_target_flag", |
                          "data-column"       => column.name                  |
                          }.deep_merge(input_html)                            |

                      - elsif column.sql_type.to_s == 'has_and_belongs_to_many' or column.sql_type.to_s == 'has_many'
                        = form.select column.reflection.name.to_s,            |
                          select_options(column),                             |
                          { include_blank: !column.presence_required? },      |
                          {:multiple          => true,                        |
                          :class             => 'chzn-select form-control',   |
                          :style             => "width:243px",                |
                          "data-required"    => column.presence_required?,    |
                          "data-text-attr"   => column.option_text_attribute, |
                          "data-target"      => "#{column_name}_target_flag", |
                          "data-column"      => column.name,                  |
                          :disabled          => column.options[:auto_fill]    |
                          }.deep_merge(input_html)           |

                      - elsif auto_complete_field?(column)
                        = form.text_field column_name, {:class => "form-control auto-complete-text-field auto-complete-text-field-#{column_name}", :value => column.value(object), "data-target" => "#{column_name}_target_flag", "data-column" => column.name}.deep_merge(input_html)

                        :javascript
                          var choices = "/wulin_master/fetch_distinct_options?"
                                               + "column=#{column_name}"
                                               + "&grid=#{grid.class}"
                                               + "&klass=#{_klass}"
                                               + "&screen=#{screen.class}"
                                               + "&text_attr=#{column_name}";
                          var container = $(".auto-complete-text-field-#{column_name}");
                          var column = {
                            auto_complete: true,
                            width: container.width(),
                            choices: choices
                          };
                          var args = {
                            column: column,
                            container: container
                          };
                          carbonCopyNewEditor = AutoCompleteTextForFormEditor.bind({})
                          carbonCopyNewEditor(args);

                      - elsif select_tag_field?(column)
                        = select_tag "#{model_name}[#{column_name}]",          |
                          select_tag_options(column),                          |
                          {:style             => "width:243px",                |
                          :class             => 'chzn-select form-control',    |
                          :disabled          => column.options[:auto_fill],    |
                          :include_blank     => !column.presence_required?,    |
                          "data-required"    => column.presence_required?,     |
                          "data-target"      => "#{column_name}_target_flag",  |
                          "data-text-attr"   => column.option_text_attribute,  |
                          "data-column"      => column.name                    |
                          }.deep_merge(input_html)            |
                        - if column.options[:depend_column].present?
                          :javascript
                            $(function(){
                              var depend_select_id = "#{model_name}_#{column.options[:depend_column]}";
                              var depend_select = $("select#" + depend_select_id);

                              depend_select.on('change', function(){
                                var current_select_id = "#{model_name}_#{column_name}";
                                var current_select = $("select#" + current_select_id);
                                var key = $(this).val();
                                current_select.find("option").hide().trigger("liszt:updated");
                                current_select.val("").trigger("liszt:updated");
                                current_select.find("option[data-key='" + key + "']").show().css("display", "").trigger("liszt:updated");
                              });
                            });

                      - elsif column.options[:file]
                        = form.file_field column_name, {"data-target" => "#{column_name}_target_flag", "data-column" => column.name, :style => 'width: 243px'}.deep_merge(input_html)
                      - elsif column.options[:password]
                        = form.password_field column_name, {class: 'form-control', "data-target" => "#{column_name}_target_flag", "data-column" => column.name, :style => 'width: 243px'}.deep_merge(input_html)
                      - else
                        - if column.sql_type.to_s.downcase == 'boolean'
                          = form.check_box column_name, {class: 'checkbox', :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-column" => column.name}.deep_merge(input_html)
                        - elsif column.sql_type.to_s.downcase == 'text'
                          = form.text_area column_name, {class: 'form-control', :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", "data-column" => column.name, :style => 'width: 243px; height: 4em;'}.deep_merge(input_html)
                        - else
                          = form.text_field column_name, {class: 'form-control', :style => 'width: 243px', :value => column.value(object), :readonly => column.options[:auto_fill], "data-target" => "#{column_name}_target_flag", 'data-date' => date_column?(column), 'data-datetime' => datetime_column?(column), 'data-time' => time_column?(column), "data-column" => column.name, placeholder: column.options[:placeholder]}.deep_merge(input_html)
                      .field_error
                        %span.required_mark= "*" if ( column.options[:input_html] && column.options[:input_html]["data-required"]) || column.options[:required]
            .modal-footer
              .submit
                %input.btn.btn-success{type: 'button', id: "#{grid.name}_submit", :name => "commit", :type => "submit", :value => t('wulin_master.button.create', default: ' Create ')}/
                %input.btn.btn-primary{type: 'button', :id => "#{grid.name}_submit_continue", :name => "commit", :type => "submit", :value => t('wulin_master.button.create_and_continue', default: ' Create and Continue ')}/
  :javascript
    $('##{grid.name}_form select[data-required="true"]').chosen({search_contains: true});
    $('##{grid.name}_form select[data-required="false"]').chosen({search_contains: true, allow_single_deselect: true});
    $('input[data-date]').attr("placeholder", "2000-01-01").datepicker({ dateFormat: 'yy-mm-dd' });
    $('input[data-datetime]').attr("placeholder", "2000-01-01 00:00").datetimepicker({
      onlyTime: false,
      dateFormat: "yy-mm-dd",
      timeFormat: 'HH:mm',
      timeOnly: false,
      stepMinute: 1,
      minuteGrid: 0,
      beforeShow: function() { calendarOpen = true },
      onClose: function() { calendarOpen = false }
    });
    $('input[data-time]').attr("placeholder", "00:00").timepicker({});
